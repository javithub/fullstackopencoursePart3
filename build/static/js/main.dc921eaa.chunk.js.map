{"version":3,"sources":["components/Person.js","components/Persons.js","components/Filter.js","services/personService.js","components/PersonForm.js","components/SuccessMessage.js","components/ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["Person","name","number","deletePerson","onClick","Persons","persons","map","person","key","id","Filter","useState","personsFiltered","setPersonsFiltered","searchName","setSearchName","onSubmit","event","preventDefault","arrayFiltered","find","element","toLowerCase","undefined","concat","value","onChange","target","type","baseUrl","axios","get","then","response","data","newObject","post","put","delete","PersonForm","setPersons","setSuccessMessage","newName","setNewName","newPhone","setNewPhone","personFound","filter","n","length","phonebookEntryObject","personService","returnedPhonebookEntry","window","confirm","setTimeout","SuccessMessage","message","className","ErrorMessage","App","successMessage","errorMessage","setErrorMessage","useEffect","initialPersons","returnedPerson","catch","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc921eaa.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({name, number, deletePerson}) => {\n\n    return (\n        <>\n            {name} {number} <button onClick={deletePerson}>Delete</button> <br/>\n         </>\n    )\n  }\n\nexport default Person;\n\n","import React from 'react'\nimport Person from './Person'\n\n\nconst Persons = ({persons, deletePerson}) => {\n\nconst displayPersons = () => persons.map(person => <Person key={person.id} name={person.name} number={person.number} deletePerson={() => deletePerson(person.id, person.name)} />)\n\n    return (\n        <div>\n            {displayPersons()}\n         </div>\n    )\n  }\n\nexport default Persons;","import React, { useState } from 'react'\nimport Persons from './Persons'\n\nconst Filter = ({ persons }) => {\n\n  const [ personsFiltered, setPersonsFiltered] = useState([]) \n  const [ searchName, setSearchName ] = useState('')\n\n  const handleSearchChange = (event) => setSearchName(event.target.value)\n\n  const searchByName = (event) => {\n    event.preventDefault()\n    const arrayFiltered = persons.find(element => element.name.toLowerCase() === searchName.toLowerCase());\n    if (arrayFiltered === undefined) setPersonsFiltered([])\n    else setPersonsFiltered([].concat(arrayFiltered))\n  }\n\n    return (\n        <>\n          <form onSubmit={searchByName}>\n            <div>filter shown with <input value={searchName} onChange={handleSearchChange}/></div>\n            <div><button type=\"submit\">search</button></div>\n          </form>\n          Filtered results:<br/>\n          <Persons persons={personsFiltered} />\n         </>\n    )\n  }\n\nexport default Filter;\n\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\n\nexport default { getAll, create, update, deletePerson }\n","import React, { useState } from 'react'\nimport personService from '../services/personService'\n\nconst PersonForm = ({ persons, setPersons, setSuccessMessage }) => {\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n\n  const addNamePhone = (event) => {\n    event.preventDefault()\n\n    const personFound = persons.filter(n => n.name === newName)\n    if (personFound.length === 0) {\n\n        const phonebookEntryObject = {\n          name: newName,\n          number: newPhone,\n          id: persons.length + 1,\n        }\n      \n        personService\n        .create(phonebookEntryObject)\n        .then(returnedPhonebookEntry => {\n          setPersons(persons.concat(returnedPhonebookEntry))\n          setNewName('')\n          setNewPhone('') \n        })\n    } else {\n      const result = window.confirm(`'${personFound[0].name}' is already added to the phonebook. Replace the old number with a new one?`);\n        if (result) {\n        const phonebookEntryObject = {\n          name: newName,\n          number: newPhone,\n          id: personFound[0].id,\n        }\n      \n        personService\n        .update(personFound[0].id, phonebookEntryObject)\n        .then(returnedPhonebookEntry => {\n          setPersons(persons.map(person => person.id !== personFound[0].id ? person : returnedPhonebookEntry))\n          setNewName('')\n          setNewPhone('') \n        })\n      }\n    }\n    setSuccessMessage(`Added '${newName}'`)\n    setTimeout(() => {\n      setSuccessMessage(null)\n    }, 5000)\n  }\n\n  \n  const handleNameChange   = (event) => setNewName(event.target.value)\n  const handlePhoneChange  = (event) => setNewPhone(event.target.value)\n\n    return (\n        <>\n          <form onSubmit={addNamePhone}>\n            <div>name: <input value={newName} onChange={handleNameChange}/></div>\n            <div>number: <input value={newPhone} onChange={handlePhoneChange} /></div>\n            <div><button type=\"submit\">add</button></div>\n          </form>\n         </>\n    )\n  }\n\nexport default PersonForm;\n\n","import React from 'react'\n\nconst SuccessMessage = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"success\">\n        {message}\n      </div>\n    )\n  }\n\nexport default SuccessMessage","import React from 'react'\n\nconst ErrorMessage = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nexport default ErrorMessage","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport SuccessMessage from './components/SuccessMessage'\nimport personService from './services/personService'\nimport ErrorMessage from './components/ErrorMessage'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [successMessage, setSuccessMessage] = useState(null) \n  const [errorMessage, setErrorMessage] = useState(null) \n\n  useEffect(() => {\n    personService\n    .getAll()\n    .then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }, [])\n\n  const deletePerson = (id, name) => {\n\n    const result = window.confirm(`Delete '${name}'?`);\n    if (result) {\n      personService\n        .deletePerson(id)\n        .then(returnedPerson => {\n          setPersons(persons.filter(n => n.id !== id))\n        })\n        .catch(error => {\n          setErrorMessage(\n            `Information of '${name}' has already been removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setPersons(persons.filter(n => n.id !== id))\n        })\n      }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessMessage message={successMessage} />\n      <ErrorMessage message={errorMessage} />\n      <Filter persons={persons} />\n      <h3>Add a new</h3>\n      <PersonForm persons={persons} setPersons={setPersons} setSuccessMessage={setSuccessMessage} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}